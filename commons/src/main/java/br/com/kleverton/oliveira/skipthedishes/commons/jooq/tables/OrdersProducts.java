/*
 * This file is generated by jOOQ.
 */
package br.com.kleverton.oliveira.skipthedishes.commons.jooq.tables;


import br.com.kleverton.oliveira.skipthedishes.commons.jooq.Indexes;
import br.com.kleverton.oliveira.skipthedishes.commons.jooq.Keys;
import br.com.kleverton.oliveira.skipthedishes.commons.jooq.Skipthedishes;
import br.com.kleverton.oliveira.skipthedishes.commons.jooq.tables.records.OrdersProductsRecord;

import java.util.Arrays;
import java.util.List;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.Index;
import org.jooq.Name;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.0"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class OrdersProducts extends TableImpl<OrdersProductsRecord> {

    private static final long serialVersionUID = 1987697359;

    /**
     * The reference instance of <code>skipthedishes.orders_products</code>
     */
    public static final OrdersProducts ORDERS_PRODUCTS = new OrdersProducts();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<OrdersProductsRecord> getRecordType() {
        return OrdersProductsRecord.class;
    }

    /**
     * The column <code>skipthedishes.orders_products.id</code>.
     */
    public final TableField<OrdersProductsRecord, Long> ID = createField("id", org.jooq.impl.SQLDataType.BIGINT.nullable(false).identity(true), this, "");

    /**
     * The column <code>skipthedishes.orders_products.id_order</code>.
     */
    public final TableField<OrdersProductsRecord, Long> ID_ORDER = createField("id_order", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>skipthedishes.orders_products.id_product</code>.
     */
    public final TableField<OrdersProductsRecord, Long> ID_PRODUCT = createField("id_product", org.jooq.impl.SQLDataType.BIGINT.nullable(false), this, "");

    /**
     * The column <code>skipthedishes.orders_products.quantity</code>.
     */
    public final TableField<OrdersProductsRecord, Integer> QUANTITY = createField("quantity", org.jooq.impl.SQLDataType.INTEGER.nullable(false), this, "");

    /**
     * Create a <code>skipthedishes.orders_products</code> table reference
     */
    public OrdersProducts() {
        this(DSL.name("orders_products"), null);
    }

    /**
     * Create an aliased <code>skipthedishes.orders_products</code> table reference
     */
    public OrdersProducts(String alias) {
        this(DSL.name(alias), ORDERS_PRODUCTS);
    }

    /**
     * Create an aliased <code>skipthedishes.orders_products</code> table reference
     */
    public OrdersProducts(Name alias) {
        this(alias, ORDERS_PRODUCTS);
    }

    private OrdersProducts(Name alias, Table<OrdersProductsRecord> aliased) {
        this(alias, aliased, null);
    }

    private OrdersProducts(Name alias, Table<OrdersProductsRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return Skipthedishes.SKIPTHEDISHES;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<Index> getIndexes() {
        return Arrays.<Index>asList(Indexes.ORDERS_PRODUCTS_ID_ORDER, Indexes.ORDERS_PRODUCTS_ID_PRODUCT, Indexes.ORDERS_PRODUCTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Identity<OrdersProductsRecord, Long> getIdentity() {
        return Keys.IDENTITY_ORDERS_PRODUCTS;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UniqueKey<OrdersProductsRecord> getPrimaryKey() {
        return Keys.KEY_ORDERS_PRODUCTS_PRIMARY;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<UniqueKey<OrdersProductsRecord>> getKeys() {
        return Arrays.<UniqueKey<OrdersProductsRecord>>asList(Keys.KEY_ORDERS_PRODUCTS_PRIMARY);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public List<ForeignKey<OrdersProductsRecord, ?>> getReferences() {
        return Arrays.<ForeignKey<OrdersProductsRecord, ?>>asList(Keys.ORDERS_PRODUCTS_IBFK_1, Keys.ORDERS_PRODUCTS_IBFK_2);
    }

    public Orders orders() {
        return new Orders(this, Keys.ORDERS_PRODUCTS_IBFK_1);
    }

    public Products products() {
        return new Products(this, Keys.ORDERS_PRODUCTS_IBFK_2);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrdersProducts as(String alias) {
        return new OrdersProducts(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public OrdersProducts as(Name alias) {
        return new OrdersProducts(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersProducts rename(String name) {
        return new OrdersProducts(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public OrdersProducts rename(Name name) {
        return new OrdersProducts(name, null);
    }
}
